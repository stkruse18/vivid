import numpy as np
import pandas as pd
import json
from collections import defaultdict
from datetime import datetime, timedelta
from selenium.webdriver.common.by import By
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import undetected_chromedriver as uc
import time
import requests
import urllib
import pytz
pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)


id_to_word = {
    "0d33e7f2-6601-486b-9f9e-cbe268d8fc88": "NBA", #Rebounds NBA
    "590e7c83-99fc-419f-bdd8-78bb0a691f8b": "NBA", #PRA NBA
    "8d718cf2-1487-401e-88f7-f9f799e85871": "NBA", #Points NBA
    "cd25de54-fbb4-4111-85ac-60a347a8728f": "NBA",  #P+R NBA
    "ff6438f9-7dad-422e-ae9a-8561636dbff5": "NBA",  # 1QP NBA
    "80eee07b-f568-4dad-81f6-b05e42aae24e": "NBA",  #P+A NBA
    "e5346095-1c5e-40f0-bb31-95181490038d": "NBA",  #R+A NBA
    "4295c94a-3110-417e-953f-a4f3ed0dd18b": "NBA",  #3PT NBA
    "e3bc1aaa-7964-4a84-bcfa-2d92a4d477a2": "NBA",  #Assists NBA
    "75c81a08-bed1-4847-8d29-9669665986c3": "NBA",  #DBL-DBL NBA
    "467daf4a-9606-47fb-94ee-6190fc4804b8": "NBA", #1QR NBA
    "8060260a-6f07-4453-bd46-bb156308957b": "NHL", #Assists NHL
    "85a18d7d-2e17-4b69-8605-6c04caeae996": "NHL", #Fantasy NHL

    # Add more mappings as needed
}

f = open('vivid')
data = json.load(f)
player_data_list = []

length = len(data["gret"])
for i in range(0, length):
    for player_info in data["gret"][i]["activePlayers"]:
        player_name = player_info["name"]
        league = player_info["league"]
        player_props = player_info["allProps"]
        #print(f"Player Name: {player_name}")
        #print(f"League: {league}")
        #print("Player Props:")
        #for prop, value in player_props.items():
            #print(f"  {prop}: {value}")
        #print("\n")
        player_data = {
            "Name": player_name,
            "League": league,
            "Player Props": {prop: value for prop, value in player_props.items()}
        }
        player_data_list.append(player_data)

data_dict = defaultdict(list)
for player_info in player_data_list:
    league = player_info["League"]
    player_name = player_info["Name"]
    player_props = player_info.get("Player Props", {})

    # Iterate through player_props
    for prop, value in player_props.items():
        data_dict["League"].append(league)
        data_dict["Player Name"].append(player_name)
        data_dict["Player Props"].append(prop)
        data_dict["Value"].append(value)
        data_dict['Book'].append('Vivid')

# Create DataFrame
df = pd.DataFrame(data_dict)


#response = requests.get('https://api.underdogfantasy.com/beta/v5/over_under_lines')
#print(response.json())


#last in player props is wrong
#allprops is visible on vivid
#"_id"

#f = open('ud')
#data = json.load(f)

ok = requests.get('https://api.underdogfantasy.com/beta/v5/over_under_lines')
data = ok.json()



#print(data['over_under_lines'][0]['over_under']['title'])
#print(len(data['over_under_lines']))
player_data_list2 = []
data_dict2 = defaultdict(list)
for i in range(0,len(data['over_under_lines'])):
    multiplier = (data['over_under_lines'][i]['options'][0]['payout_multiplier'])
    if multiplier == '1.0':
        bigname = (data['over_under_lines'][i]['over_under']['title'])
        stat = (data['over_under_lines'][i]['over_under']['appearance_stat']['display_stat'])
        #statid = (data['over_under_lines'][i]['over_under']['appearance_stat']['pickem_stat_id'])
        appearanceid = (data['over_under_lines'][i]['over_under']['appearance_stat']['appearance_id'])
        for entry in data['appearances']:
            if entry['id'] == appearanceid:
                playerid = entry['player_id']
        for entry in data['players']:
            if entry['id'] == playerid:
                sport = entry['sport_id']
        result = bigname.replace(stat, '').replace(' O/U', '').strip()
        #might need period for jr names
        #print(result)
        #print(stat)
        line = (data['over_under_lines'][i]['stat_value'])
        #print(line)
        #print(appearanceid)
        #print(playerid)
        #print(sport)
        player_data = {
            "Name": result,
            "League": sport,
            "Player Props": stat,
            "Value": line
        }
        player_data_list2.append(player_data)

        #print(statid)
        #print(sport)
#maybe see if pickem stat id can be associated to sport
for player_info in player_data_list2:
    league = player_info["League"]
    player_name = player_info["Name"]
    prop = player_info['Player Props']
    value = player_info['Value']
    data_dict2["League"].append(league)
    data_dict2["Player Name"].append(player_name)
    data_dict2["Player Props"].append(prop)
    data_dict2["Value"].append(value)
    data_dict2['Book'].append('Underdog')

df2 = pd.DataFrame(data_dict2)
stat_mapping = {
    'Points + Rebounds + Assists': 'Pts + Rebs + Asts',
    'ReceivingYards': 'Receiving Yards',
    'RushingYards': 'Rushing Yards',
    'Total Tackles': 'Tackles + Assists',
    'Anytime TD Scored': 'Rush + Rec TDs',
    'Rush Attempts': 'Rushing Attempts',
    '3PT Made': '3-Pointers Made',
    'Field Goals Made': 'FG Made',
    'Interceptions Thrown': 'Interceptions',
    'Pass Attempts': 'Passing Attempts',
    'PassingYards': 'Passing Yards',
    'PassingTouchdowns': 'Passing TDs',
    'Kills Game 1': 'Kills in Map 1',
    'Pts + Reb': 'Points + Rebounds',
    'Pts + Ast': 'Points + Assists',
    'ShotsOnGoal': 'Shots',
    'Reb + Ast': 'Rebounds + Assists',
    'Kills Gm 1-2': 'Kills in Maps 1+2',
    'Shot Attempts': 'Shots Attempted',
    'Shots OnTarget': 'Shots On Target',
    'GoaltendingSaves': 'Saves',
    '3PM': '3-Pointers Made',
    'Pts + Asts': 'Points + Assists',
    'Pts + Rebs': 'Points + Rebounds',
    'Rebs + Asts': 'Rebounds + Assists',
    'Blks + Stls': 'Blocks + Steals',
    'Maps 1-2 Kills': 'Kills in Maps 1+2',
    'Maps 1-2 Assists': 'Assists on Maps 1+2',

}

name_mapping = {
    'Tolu Smith III': 'Tolu Smith',
    'P.J. Washington Jr.': 'PJ Washington',
    'Myron Amey Jr.': 'Myron Amey',
}
name_mapping2 = {
    'Cam Johnson': 'Cameron Johnson'
}

df['Player Props'] = df['Player Props'].replace(stat_mapping)
df['Player Name'] = df['Player Name'].replace(name_mapping)
df2['Player Name'] = df2['Player Name'].replace(name_mapping2)
df2.loc[df2['Player Name'].str.startswith('LoL: '), 'League'] = 'LOL'
df2.loc[df2['Player Name'].str.startswith('LoL: '), 'Player Name'] = df2['Player Name'].str.replace('LoL: ', '')
#Probably have to change soccer to FIFA
#print(df)
#print(df2)

unique1 = (df['Player Props'].unique())
unique2 = (df2['Player Props'].unique())
set1 = set(unique1)
set2 = set(unique2)
unique_list1 = list(set1 - set2)
unique_list2 = list(set2 - set1)
#Uncomment to fix prop misspellings
print(unique_list1)
print(unique_list2)
desired_width=320
pd.set_option('display.width', desired_width)
np.set_printoptions(linewidth=desired_width)
def remove_trailing_zero(number):
    number_str = str(number)
    if '.' in number_str:
        integer_part, fractional_part = number_str.split('.')
        if fractional_part.endswith('00'):
            number_str = integer_part + '.' + fractional_part[:-1]
    return number_str

df['League'] = df['League'].replace('SOCCER', 'FIFA')
merged_df = pd.merge(df, df2, on=['League', 'Player Name', 'Player Props'], suffixes=('_1', '_2'))
merged_df['Value_1'] = merged_df['Value_1'].apply(lambda x: remove_trailing_zero(x))
#print(merged_df)

new_df = merged_df[merged_df['Value_1'] != merged_df['Value_2']].copy()
new_df = new_df[new_df['Value_1'] != 'nan']
new_df['Value_1'] = pd.to_numeric(new_df['Value_1'])
new_df['Value_2'] = pd.to_numeric(new_df['Value_2'])
new_df['Percent_Difference'] = (abs(new_df['Value_1'] - new_df['Value_2']) / ((new_df['Value_1'] + new_df['Value_2']) / 2)) * 100

# Sort DataFrame by percent difference
new_df = new_df.sort_values(by='Percent_Difference', ascending=False)

merged2 = df.merge(df2, on=['League', 'Player Name', 'Player Props'], how='left', indicator=True)
unique_to_df2 = merged2[merged2['_merge'] == 'left_only']
unique_to_df2 = unique_to_df2.drop(columns='_merge')
unique_to_df2 = unique_to_df2[unique_to_df2['League'] != 'CS2']
unique_to_df2 = unique_to_df2.sort_values(by='Player Props')
#print(unique_to_df2) #For values that arent on ud

#dabble use competitions to get ids, then for loop on requests
#super draft use https://api.superdraft.io/api/prop/v3/active-fantasy
def zobozoey(sport, stat, selector, jsoon, realstat):
    player_datalol = []
    for i in range(0, len(jsoon['eventGroup']['offerCategories'])):
        if jsoon['eventGroup']['offerCategories'][i]['name'] == stat:
            x = i
            for z in range(0, len(jsoon['eventGroup']['offerCategories'][x]['offerSubcategoryDescriptors'])):
                if jsoon['eventGroup']['offerCategories'][x]['offerSubcategoryDescriptors'][z]['name'] == realstat:
                    selector = z
            stat = jsoon['eventGroup']['offerCategories'][x]['offerSubcategoryDescriptors'][selector]['name']

            for i in range(0, len(
                    jsoon['eventGroup']['offerCategories'][x]['offerSubcategoryDescriptors'][selector][
                        'offerSubcategory'][
                        'offers'])):
                for j in range(0, len(
                        jsoon['eventGroup']['offerCategories'][x]['offerSubcategoryDescriptors'][selector][
                            'offerSubcategory'][
                            'offers'][i])):
                    for k in range(0, len(
                            jsoon['eventGroup']['offerCategories'][x]['offerSubcategoryDescriptors'][selector][
                                'offerSubcategory']['offers'][i][j]['outcomes'])):
                        ou = (
                            jsoon['eventGroup']['offerCategories'][x]['offerSubcategoryDescriptors'][selector][
                                'offerSubcategory'][
                                'offers'][i][j]['outcomes'][k]['label'])
                        odds = (
                            jsoon['eventGroup']['offerCategories'][x]['offerSubcategoryDescriptors'][selector][
                                'offerSubcategory'][
                                'offers'][i][j]['outcomes'][k]['oddsAmerican'])
                        line = (
                            jsoon['eventGroup']['offerCategories'][x]['offerSubcategoryDescriptors'][selector][
                                'offerSubcategory'][
                                'offers'][i][j]['outcomes'][k]['line'])
                        name = (
                            jsoon['eventGroup']['offerCategories'][x]['offerSubcategoryDescriptors'][selector][
                                'offerSubcategory'][
                                'offers'][i][j]['outcomes'][k]['participant'])
                        player_data = {
                            "Name": name,
                            "League": sport,
                            "Player Props": stat,
                            "Value": line,
                            "Odds": odds,
                            "O/U": ou
                        }
                        player_datalol.append(player_data)

            data_dict3 = defaultdict(list)
            for player_info in player_datalol:
                league = player_info["League"]
                player_name = player_info["Name"]
                prop = player_info['Player Props']
                value = player_info['Value']
                odds = player_info['Odds']
                ou = player_info['O/U']
                data_dict3["League"].append(league)
                data_dict3["Player Name"].append(player_name)
                data_dict3["Player Props"].append(prop)
                data_dict3['O/U'].append(ou)
                data_dict3["Value"].append(value)
                data_dict3["Odds"].append(odds)
                data_dict3['Book'].append('DraftKings')

            df3 = pd.DataFrame(data_dict3)
            return df3

def nba():
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/1218/subcategories/12497?format=json')
    jsoon = please.json()
    #3s
    df1 = (zobozoey('NBA', 'Player Threes', 0, jsoon, 'Threes'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/1215/subcategories/12488?format=json')
    jsoon = please.json()
    #pts
    df2 = (zobozoey('NBA', 'Player Points', 0, jsoon, 'Points'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/1215/subcategories/13785?format=json')
    jsoon = please.json()
    #alt pts
    df3 = (zobozoey('NBA', 'Player Points', 2, jsoon, 'Alt Points'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/583/subcategories/5001?format=json')
    jsoon = please.json()
    #pra
    df4 = (zobozoey('NBA', 'Player Combos', 0, jsoon, 'Pts + Reb + Ast'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/583/subcategories/9976?format=json')
    jsoon = please.json()
    #P+r
    df5 = (zobozoey('NBA', 'Player Combos', 1, jsoon, 'Pts + Reb'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/583/subcategories/9973?format=json')
    jsoon = please.json()
    #p+a
    df6 = (zobozoey('NBA', 'Player Combos', 2, jsoon, 'Pts + Ast'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/583/subcategories/9974?format=json')
    jsoon = please.json()
    #a+r
    df7 = (zobozoey('NBA', 'Player Combos', 3, jsoon, 'Ast + Reb'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/1216/subcategories/12492?format=json')
    jsoon = please.json()
    #reb
    df8 = (zobozoey('NBA', 'Player Rebounds', 0, jsoon, 'Rebounds'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/1216/subcategories/12536?format=json')
    jsoon = please.json()
    #alt reb
    df9 = (zobozoey('NBA', 'Player Rebounds', 2, jsoon, 'Alt Rebounds'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/1217/subcategories/12495?format=json')
    jsoon = please.json()
    #assist
    df10 = (zobozoey('NBA', 'Player Assists', 0, jsoon, 'Assists'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/1217/subcategories/12537?format=json')
    jsoon = please.json()
    #assist
    df11 = (zobozoey('NBA', 'Player Assists', 2, jsoon, 'Alt Assists'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/1293/subcategories/13508?format=json')
    jsoon = please.json()
    #steals
    df12 = (zobozoey('NBA', 'Player Defense', 0, jsoon, 'Steals'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/1293/subcategories/13780?format=json')
    jsoon = please.json()
    #blocks
    df13 = (zobozoey('NBA', 'Player Defense', 2, jsoon, 'Blocks'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/1293/subcategories/13781?format=json')
    jsoon = please.json()
    #s+b
    df14 = (zobozoey('NBA', 'Player Defense', 4, jsoon, 'Steals + Blocks'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/42648/categories/1293/subcategories/13782?format=json')
    jsoon = please.json()
    #tos
    df15 = (zobozoey('NBA', 'Player Defense', 5, jsoon, 'Turnovers'))
    goddf = pd.concat([df1, df2, df3, df4, df5, df6, df7, df8, df9, df10, df11, df12, df13, df14, df15])
    stat_mapping = {
        "Threes": "3-Pointers Made",
        "Alt Points": "Points",
        "Alt Rebounds": "Rebounds",
        "Alt Assists": "Assists",
        "Steals + Blocks": "Blocks + Steals",
        "Ast + Reb": "Rebounds + Assists",
        "Pts + Ast": "Points + Assists",
        "Pts + Reb": "Points + Rebounds"
    }
    goddf = goddf.groupby(['League', 'Player Name', 'Player Props', 'Value', 'Book'])['Odds'].apply(
        lambda x: ' '.join(x)).reset_index()
    goddf['Player Props'] = goddf['Player Props'].replace(stat_mapping)
    return goddf

def ncaabb():
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/92483/categories/1218/subcategories/12497?format=json')
    jsoon = please.json()
    #3s
    df1 = (zobozoey('CBB', 'Player Threes', 0, jsoon, 'Threes'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/92483/categories/1215/subcategories/12488?format=json')
    jsoon = please.json()
    #pts
    df2 = (zobozoey('CBB', 'Player Points', 0, jsoon, 'Points'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/92483/categories/583/subcategories/5001?format=json')
    jsoon = please.json()
    #pra
    df4 = (zobozoey('CBB', 'Player Combos', 0, jsoon, 'Pts + Reb + Ast'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/92483/categories/583/subcategories/9976?format=json')
    jsoon = please.json()
    #P+r
    df5 = (zobozoey('CBB', 'Player Combos', 1, jsoon, 'Pts + Reb'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/92483/categories/583/subcategories/9973?format=json')
    jsoon = please.json()
    #p+a
    df6 = (zobozoey('CBB', 'Player Combos', 2, jsoon, 'Pts + Ast'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/92483/categories/583/subcategories/9974?format=json')
    jsoon = please.json()
    #a+r
    df7 = (zobozoey('CBB', 'Player Combos', 3, jsoon, 'Ast + Reb'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/92483/categories/1216/subcategories/12492?format=json')
    jsoon = please.json()
    #reb
    df8 = (zobozoey('CBB', 'Player Rebounds', 0, jsoon, 'Rebounds'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/92483/categories/1217/subcategories/12495?format=json')
    jsoon = please.json()
    #assist
    df10 = (zobozoey('CBB', 'Player Assists', 0, jsoon, 'Assists'))
    please = requests.get('https://sportsbook.draftkings.com//sites/US-SB/api/v5/eventgroups/92483/categories/1293/subcategories/13508?format=json')
    jsoon = please.json()
    #steals
    df12 = (zobozoey('CBB', 'Player Defense', 0, jsoon, 'Steals'))
    goddf = pd.concat([df1, df2, df4, df5, df6, df7, df8, df10, df12])
    stat_mapping = {
        "Threes": "3-Pointers Made",
        "Ast + Reb": "Rebounds + Assists",
        "Pts + Ast": "Points + Assists",
        "Pts + Reb": "Points + Rebounds"
    }
    goddf = goddf.groupby(['League', 'Player Name', 'Player Props', 'Value', 'Book'])['Odds'].apply(
        lambda x: ' '.join(x)).reset_index()
    goddf['Player Props'] = goddf['Player Props'].replace(stat_mapping)
    return goddf


#nba = nba()
"""oddsmerge = pd.merge(unique_to_df2, nba, how='left', left_on=['League', 'Player Name', 'Player Props', 'Value_x'], right_on= ['League', 'Player Name', 'Player Props', 'Value'])
oddsmerge = oddsmerge.drop(columns=['Value_y', 'Book_y', 'Value', 'Book'])
bigmerge = pd.merge(new_df, nba, how='left', left_on=['League', 'Player Name', 'Player Props', 'Value_1'], right_on= ['League', 'Player Name', 'Player Props', 'Value'])
bigmerge = bigmerge.drop(columns=['Value', 'Book'])
print(bigmerge)
print(oddsmerge)"""

"""ncaabb = ncaabb()
oddsmerge = pd.merge(oddsmerge, ncaabb, how='left', left_on=['League', 'Player Name', 'Player Props', 'Value_x'], right_on= ['League', 'Player Name', 'Player Props', 'Value'])
oddsmerge = oddsmerge.drop(columns=['Value', 'Book'])
bigmerge = pd.merge(bigmerge, ncaabb, how='left', left_on=['League', 'Player Name', 'Player Props', 'Value_1'], right_on= ['League', 'Player Name', 'Player Props', 'Value'])
bigmerge = bigmerge.drop(columns=['Value', 'Book'])
print(bigmerge)
print(oddsmerge)"""

def insanezo():
    nbadf = nba()
    cbbdf = ncaabb()
    combine = pd.concat([nbadf, cbbdf])
    return combine
#Dont run insanezo if u dont want odds

def vividzo():
    combine = insanezo()
    #combine = pd.DataFrame(columns=['League', 'Player Name', 'Player Props', 'Value', 'Book'])
    #use if odds dont work ^
    oddsmerge = pd.merge(unique_to_df2, combine, how='left', left_on=['League', 'Player Name', 'Player Props', 'Value_x'], right_on= ['League', 'Player Name', 'Player Props', 'Value'])
    oddsmerge = oddsmerge.drop(columns=['Value_y', 'Book_y', 'Value', 'Book'])
    bigmerge = pd.merge(new_df, combine, how='left', left_on=['League', 'Player Name', 'Player Props', 'Value_1'], right_on= ['League', 'Player Name', 'Player Props', 'Value'])
    bigmerge = bigmerge.drop(columns=['Value', 'Book'])
    print(bigmerge)
    print(oddsmerge)


def quack():
    f = open('quack')
    data = json.load(f)
    sport = data['games'][0]['leagueName']
    quackdatalist = []
    quackdatadict = defaultdict(list)
    for i in range(0, len(data['games'])):
        for j in range(0, len(data['games'][i]['overUnders'])):
            for k in range(0, len(data['games'][i]['overUnders'][j]['data'])):
                if data['games'][i]['overUnders'][j]['data'][k]['combinedStat'] == False:
                    name = (data['games'][i]['overUnders'][j]['data'][k]['playerName'])
                    stat = (data['games'][i]['overUnders'][j]['data'][k]['statDisplay'])
                    value = (data['games'][i]['overUnders'][j]['data'][k]['projection'])
                    overodds = 0
                    underodds = 0
                    overodds1 = (data['games'][i]['overUnders'][j]['data'][k].get('overOdds'))
                    underodds1 = (data['games'][i]['overUnders'][j]['data'][k].get('underOdds'))
                    if overodds1 is not None:
                        underodds = overodds1
                    if underodds1 is not None:
                        overodds = underodds1
                    player_data = {
                        "Name": name,
                        "League": sport,
                        "Player Props": stat,
                        "Value": value,
                        "Over": overodds,
                        "Under": underodds
                    }
                    quackdatalist.append(player_data)

    for player_info in quackdatalist:
        league = player_info["League"]
        player_name = player_info["Name"]
        prop = player_info['Player Props']
        value = player_info['Value']
        over = player_info['Over']
        under = player_info['Under']
        quackdatadict["League"].append(league)
        quackdatadict["Player Name"].append(player_name)
        quackdatadict["Player Props"].append(prop)
        quackdatadict["Value"].append(value)
        quackdatadict['Book'].append('Quack')
        quackdatadict['Over'].append(over)
        quackdatadict['Under'].append(under)

    quackdf = pd.DataFrame(quackdatadict)
    quackdf['Player Props'] = quackdf['Player Props'].replace(stat_mapping)
    stat_mapping3 = {
        'Shots on Goal': 'Shots'
    }
    quackdf['Player Props'] = quackdf['Player Props'].replace(stat_mapping3)
    return (quackdf)

def runquack():
    quackdf = quack()
    quackdf['League'] = quackdf['League'].replace('LCO 2024 Split 1', 'LOL')
    quackdf['League'] = quackdf['League'].replace('LLA 2024', 'LOL')
    quackdf['League'] = quackdf['League'].replace('LFL 2024 Spring', 'LOL')
    quackdf['League'] = quackdf['League'].replace('LJL Spring 2024', 'LOL')
    quackdf['Player Name'] = quackdf['Player Name'].str.lower()
    df2['Player Name'] = df2['Player Name'].str.lower()
    quackmerge = pd.merge(quackdf, df2, on=['League', 'Player Name', 'Player Props'], suffixes=('_1', '_2'))
    quackmerge['Value_2'] = quackmerge['Value_2'].astype(float)
    cowdf = quackmerge[quackmerge['Value_1'] != quackmerge['Value_2']].copy()
    cowdf['Value_1'] = pd.to_numeric(cowdf['Value_1'])
    cowdf['Value_2'] = pd.to_numeric(cowdf['Value_2'])
    cowdf['Percent_Difference'] = (abs(cowdf['Value_1'] - cowdf['Value_2']) / (
                (cowdf['Value_1'] + cowdf['Value_2']) / 2)) * 100
    cowdf = cowdf.sort_values(by='Percent_Difference', ascending=False)

    merged2 = quackdf.merge(df2, on=['League', 'Player Name', 'Player Props'], how='left', indicator=True)
    unique_to_df2 = merged2[merged2['_merge'] == 'left_only']
    unique_to_df2 = unique_to_df2.drop(columns='_merge')
    unique_to_df2 = unique_to_df2.sort_values(by='Player Props')

    combine = insanezo()
    combine['Player Name'] = combine['Player Name'].str.lower()
    oddsmerge2 = pd.merge(unique_to_df2, combine, how='left',
                          left_on=['League', 'Player Name', 'Player Props', 'Value_x'],
                          right_on=['League', 'Player Name', 'Player Props', 'Value'])
    oddsmerge2 = oddsmerge2.drop(columns=['Value_y', 'Book_y', 'Value', 'Book'])
    bigmerge2 = pd.merge(cowdf, combine, how='left', left_on=['League', 'Player Name', 'Player Props', 'Value_1'],
                         right_on=['League', 'Player Name', 'Player Props', 'Value'])
    bigmerge2 = bigmerge2.drop(columns=['Value', 'Book'])
    print(bigmerge2)
    print(oddsmerge2)


def prizepicks(sport):
    options = uc.ChromeOptions()
    options.headless = False
    driver = uc.Chrome(options=options)
    driver.get("https://app.prizepicks.com/")
    time.sleep(10)
    wait = WebDriverWait(driver, 15).until(EC.presence_of_element_located((By.CLASS_NAME, "close")))
    time.sleep(10)
    driver.find_element(By.XPATH, "/html/body/div[3]/div[3]/div/div/div[3]/button").click()
    time.sleep(10)
    ppPlayers = []
    driver.find_element(By.XPATH, "//div[@class='name'][normalize-space()='NBA']").click()
    time.sleep(5)

    stat_container = WebDriverWait(driver, 1).until(EC.visibility_of_element_located((By.CLASS_NAME, "stat-container")))
    categories = driver.find_element(By.CSS_SELECTOR, ".stat-container").text.split('\n')

    for category in categories:
        driver.find_element(By.XPATH, f"//div[text()='{category}']").click()
        projectionsPP = WebDriverWait(driver, 5).until(EC.presence_of_all_elements_located((By.CSS_SELECTOR, ".projection")))

        for projetions in projectionsPP:
            name = projetions.find_element(By.CLASS_NAME,'name').text
            pts = projetions.find_element(By.CLASS_NAME,'presale-score').get_attribute('innerHTML')
            proptype = projetions.find_element(By.CLASS_NAME,'text').get_attribute('innerHTML')

            player = {
                'League': sport,
                'Player Name': name,
                'Player Props': proptype,
                'Value': pts
            }
            ppPlayers.append(player)

    dfProps = pd.DataFrame(ppPlayers)
    dfProps['Value'] = pd.to_numeric(dfProps['Value'])
    print(dfProps.dtypes)
    stat_mapping = {
        "3-PT Made": "3-Pointers Made",
        "Pts<wbr>+Rebs<wbr>+Asts": "Pts + Rebs + Asts",
        "Pts<wbr>+Rebs": "Points + Rebounds",
        "Pts<wbr>+Asts": "Points + Assists",
        "Blocked Shots": "Blocks",
        "Rebs<wbr>+Asts": "Rebounds + Assists",
        "Blks<wbr>+Stls": "Blocks + Steals",
    }
    dfProps['Player Props'] = dfProps['Player Props'].replace(stat_mapping)
    return dfProps


def prizeduel():
    pp = prizepicks('NBA')
    nbas = nba()
    merge = pd.merge(pp, nbas, on=['League', 'Player Name', 'Player Props', 'Value'], how='left')
    print(merge.sort_values(by='Odds'))

runquack()
